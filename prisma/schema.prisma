generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// User Model 
model User {
    id               String  @id @default(auto()) @map("_id") @db.ObjectId
    username         String  @unique
    email            String  @unique
    password         String
    confirmPassword  String
    verifyCode       String
    verifyCodeExpiry String
    isVerified       Boolean @default(false)

    // Timestamps for better tracking
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    submissions  Submission[]
    comments     Comment[]
    codeProgress CodeProgress[]
    Achievement  Achievement[]
    LeaderBoard  LeaderBoard[]
}

// Problem Model 
model Problem {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    difficulty  String
    tags        String[]
    examples    Example[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    submissions  Submission[]
    comments     Comment[]
    tag          Tag?           @relation(fields: [tagId], references: [id])
    tagId        String?        @db.ObjectId
    CodeProgress CodeProgress[]
}

// Exaple Model
model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    input     String
    output    String
    problem   Problem? @relation(fields: [problemId], references: [id])
    problemId String?  @db.ObjectId
}

// Submission Model
model Submission {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    userId          String   @db.ObjectId
    problemId       String   @db.ObjectId
    code            String
    status          String // "Success", "Failed", "TLE", "Error"
    testCasesResult Json
    totalCasesPass  Int
    totalCasesFail  Int
    submittedAt     DateTime @default(now())

    // Relations 
    user    User    @relation(fields: [userId], references: [id])
    problem Problem @relation(fields: [problemId], references: [id])
}

// Tag Model
model Tag {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique

    // Relation Problem
    problems Problem[]
}

// Comment Model
model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    problemId String   @db.ObjectId
    content   String
    createdAt DateTime @default(now())

    // Relations 
    user    User    @relation(fields: [userId], references: [id])
    problem Problem @relation(fields: [problemId], references: [id])
}

// CodeProgress Model
model CodeProgress {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    problemId String   @db.ObjectId
    code      String
    savedAt   DateTime @default(now())

    // Relations
    user    User    @relation(fields: [userId], references: [id])
    problem Problem @relation(fields: [problemId], references: [id])
}

// Achivment Models
model Achievement {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @db.ObjectId
    title       String
    description String
    badgeUrl    String // URl From s3
    awardedAt   DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id])
}

// LeaderBoard Model
model LeaderBoard {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    userId     String @db.ObjectId
    rank       Int
    score      Int
    solvedEasy Int
    solvedMid  Int
    solvedHard Int

    // Relation
    user User @relation(fields: [userId], references: [id])
}


